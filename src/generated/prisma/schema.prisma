// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Generator block specifies the Prisma Client generator.
// This will generate TypeScript types for query results and other Prisma Client features.
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma" // User-specified output path for the generated Prisma Client.
}

// Datasource block specifies the database connection.
// Using PostgreSQL as the database provider.
// The connection URL is sourced from the DATABASE_URL environment variable.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // User-specified environment variable for the database URL.
}

// --------------------
// ENUMS
// These enums define a set of predefined values for specific fields,
// ensuring data consistency and type safety.
// --------------------

// UserRole defines roles within a Workspace.
enum UserRole {
  ADMIN // Full control over the workspace, including billing and member management.
  MEMBER // Can create and manage projects, and contribute to projects they are part of.
  VIEWER // Read-only access to workspace resources they are permitted to see.
}

// ProjectRole defines roles within a specific Project.
// This allows for more granular permissions than Workspace roles.
enum ProjectRole {
  MANAGER // Can manage project settings, members, and all project content.
  EDITOR // Can modify project content (ideas, tasks, analyses).
  VIEWER // Read-only access to the project.
}

// OAuthProvider lists supported OAuth providers for user authentication.
enum OAuthProvider {
  GOOGLE
  GITHUB
}

// PlanInterval defines the billing frequency for subscription plans.
enum PlanInterval {
  ONE_TIME // For single purchases or features (e.g., a pipeline run).
  MONTHLY
  YEARLY
}

// SubscriptionStatus tracks the current state of a user's subscription.
enum SubscriptionStatus {
  ACTIVE // Subscription is active and paid.
  CANCELED // Subscription has been canceled but may still be active until period end.
  PAST_DUE // Payment failed, subscription needs attention.
  INCOMPLETE // Initial payment not completed.
  INCOMPLETE_EXPIRED // Initial payment not completed and window expired.
  TRIALING // User is on a free trial period.
  UNPAID // A state beyond past_due, possibly leading to suspension.
}

// OrderStatus tracks the status of a payment or order.
enum OrderStatus {
  PENDING // Order initiated, awaiting payment confirmation.
  PROCESSING // Payment is being processed.
  SUCCESSFUL // Payment completed successfully.
  FAILED // Payment failed.
  REFUNDED // Payment was refunded.
}

// IdeaStatus tracks the lifecycle stage of a software idea.
enum IdeaStatus {
  DRAFT // Idea is being drafted by the user, not yet submitted for AI processing.
  SUBMITTED // Idea submitted for validation or refinement.
  VALIDATING // AI is currently validating the idea.
  VALIDATED // AI validation process completed.
  REFINING // AI is currently refining the idea based on feedback or further analysis.
  REFINED // AI refinement process completed.
  ARCHIVED // Idea is archived and no longer active.
}

// AnalysisType categorizes the different AI-driven analyses Idea_lens can perform.
// This helps in orchestrating the correct AI models and interpreting results.
enum AnalysisType {
  // Idea Stage
  IDEA_VALIDATION // Comprehensive feasibility and potential assessment of an idea.
  IDEA_REFINEMENT // AI-assisted refinement of an existing idea.
  PROJECT_SCOPE_EVALUATION // AI analysis to define and recommend project scope.

  // Market & Competitor Stage
  MARKET_RESEARCH // Researching market size, trends, target audience.
  COMPETITOR_ANALYSIS // Identifying and analyzing competitors.
  SWOT_ANALYSIS // Generating Strengths, Weaknesses, Opportunities, Threats analysis for the project.

  // Naming & Branding Stage
  NAMING_BRANDING // Suggesting names and checking domain availability.

  // Planning & Development Stage
  TASK_SUGGESTION // AI suggesting tasks based on project idea and scope.
  CODE_REVIEW_SUMMARY // AI summarizing code changes from Git (e.g., PRs), might also include suggestions.
  // Could lead to GitHubAIActionLog entries if posted to GitHub.
  PERFORMANCE_OPTIMIZATION_SUGGESTION // AI suggesting code performance improvements.

  // Tracking & Strategy Stage
  PRODUCTIVITY_INSIGHTS // Analyzing team productivity and project progress.

  // Presentation Stage
  PITCH_DECK_CONTENT_GENERATION // AI generating content for a pitch deck (to be used with Slidespeak). This analysis produces the *content*.
  // A subsequent process might use this content to call Slidespeak and generate a file.

  // Generic
  DOCUMENT_ANALYSIS // General purpose AI analysis of uploaded documents.
}

// AnalysisStatus tracks the progress of an AI analysis task.
enum AnalysisStatus {
  PENDING // User requested, not yet picked up by worker.
  QUEUED // Picked up, task sent to async queue (e.g., BullMQ).
  PROCESSING // Worker is actively processing the analysis.
  COMPLETED // Analysis finished successfully.
  FAILED // Analysis failed due to an error.
  CANCELED // User explicitly canceled the analysis.
}

// TaskStatus defines the possible states of a project task.
enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  ARCHIVED
}

// TaskPriority indicates the urgency or importance of a task.
enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// IntegrationProvider lists the third-party services Idea_lens can integrate with
// where users typically provide credentials or explicit connections.
enum IntegrationProvider {
  GITHUB // For project management (GitHub Projects), code hosting, code analysis, and GitHub App interactions.
  JIRA // For project management and task synchronization.
  // SLIDESPEAK, DomainR, BrandFetch are handled as direct service calls by IdeaLens backend, not user-configured integrations here.
}

// IntegrationSyncStatus tracks the status of data synchronization with an external service.
enum IntegrationSyncStatus {
  IDLE // Not currently syncing.
  SYNCING // Actively syncing data.
  SUCCESS // Last sync was successful.
  FAILED // Last sync failed.
  NEEDS_REAUTH // Integration requires re-authentication.
}

// NotificationType categorizes the different types of notifications sent to users.
enum NotificationType {
  // Workspace & User
  WORKSPACE_INVITE_RECEIVED
  WORKSPACE_INVITE_ACCEPTED
  USER_ADDED_TO_WORKSPACE
  USER_REMOVED_FROM_WORKSPACE
  WORKSPACE_ROLE_CHANGED

  // Project & Idea
  PROJECT_CREATED
  USER_ADDED_TO_PROJECT
  USER_REMOVED_FROM_PROJECT
  PROJECT_ROLE_CHANGED
  IDEA_SUBMITTED
  IDEA_STATUS_CHANGED

  // Analysis & AI
  ANALYSIS_STARTED
  ANALYSIS_COMPLETED
  ANALYSIS_FAILED
  PIPELINE_RUN_STARTED // Notification for when a multi-step pipeline starts.
  PIPELINE_RUN_COMPLETED // Notification for when a multi-step pipeline completes.
  PIPELINE_RUN_FAILED // Notification for when a multi-step pipeline fails.

  // Deliverables (NEW)
  DELIVERABLE_GENERATED
  DELIVERABLE_UPDATED
  DELIVERABLE_GENERATION_FAILED

  // Tasks
  TASK_CREATED
  TASK_ASSIGNED
  TASK_STATUS_CHANGED
  TASK_DUE_SOON
  TASK_MENTION

  // Integrations
  INTEGRATION_CONNECTED
  INTEGRATION_DISCONNECTED
  INTEGRATION_SYNC_COMPLETE
  INTEGRATION_SYNC_FAILED

  // GitHub Specific Notifications
  GITHUB_AI_ACTION_SUCCESS // e.g., "AI successfully commented on PR #123"
  GITHUB_AI_ACTION_FAILED // e.g., "AI failed to post review on PR #123"

  // Billing
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_CANCELED
  SUBSCRIPTION_ENDING_SOON
  PAYMENT_SUCCESSFUL
  PAYMENT_FAILED
  INVOICE_READY

  // General
  GENERAL_ANNOUNCEMENT // For platform-wide announcements.
}

// UserTheme defines UI theme preferences for the user.
enum UserTheme {
  LIGHT
  DARK
  SYSTEM // Follows the operating system's theme preference.
}

// WorkspaceVisibility defines default visibility for new projects within a workspace.
// Can be overridden at the project level.
enum WorkspaceVisibility {
  PRIVATE // Only explicitly invited members can see projects.
  WORKSPACE_VISIBLE // All members of the workspace can see projects by default.
}

// MemberInvitePolicy defines who can invite new members to a workspace.
enum MemberInvitePolicy {
  ADMINS_ONLY
  ADMINS_AND_MEMBERS
}

// InviteStatus tracks the status of an invitation to a workspace or project.
enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
  CANCELED // Canceled by the inviter.
}

// GitHubAIActionType defines the specific AI-driven actions IdeaLens can perform on GitHub.
enum GitHubAIActionType {
  PR_REVIEW_COMMENT // AI posts a specific review comment on a PR line or general PR.
  PR_SUMMARY_COMMENT // AI posts a summary of the PR.
  ISSUE_COMMENT // AI posts a comment on an issue.
  ISSUE_AUTO_CLOSE // AI automatically closes an issue based on rules (e.g., linked PR merged and specific keywords found).
  ISSUE_AUTO_TAG // AI automatically adds tags/labels to an issue based on content or rules.
  PR_AUTO_TAG // AI automatically adds tags/labels to a PR based on content or rules.
  // Add more as needed, e.g., PR_APPROVAL_SUGGESTION, COMMIT_COMMENT_SUGGESTION
}

// GitHubEntityType identifies the type of GitHub entity an AI action is related to.
enum GitHubEntityType {
  PULL_REQUEST
  ISSUE
  COMMIT
  // Could also include REPOSITORY if AI performs repo-level actions/summaries.
}

// ActionStatus tracks the outcome of an attempted AI action.
enum ActionStatus {
  PENDING // Action is queued or waiting for trigger.
  EXECUTED // Action was successfully performed.
  FAILED // Action failed to execute.
  SKIPPED // Action was skipped due to conditions not met or configuration.
}

// FeedbackEntityType categorizes what the user is providing feedback on.
enum FeedbackEntityType {
  ANALYSIS_RESULT // Feedback on the output of an AI analysis (e.g., market research quality).
  NAME_SUGGESTION // Feedback on specific AI-generated name suggestions.
  TASK_SUGGESTION // Feedback on AI-suggested tasks.
  GITHUB_AI_ACTION // Feedback on an AI action performed on GitHub (e.g., quality of a PR comment).
  DELIVERABLE // Feedback on a generated project deliverable. (NEW)
  PITCH_DECK_CONTENT // Feedback on AI-generated content for a pitch deck (distinct from the final deliverable if Slidespeak is involved).
  PLATFORM_FEATURE // General feedback on a specific feature of the IdeaLens platform.
  GENERAL // General platform feedback not tied to a specific entity.
}

// FileStatus tracks the state of an uploaded file in ProjectFile. (NEW)
enum FileStatus {
  UPLOADING // File is currently being uploaded or processed post-upload.
  ACTIVE // File is available and in use.
  ARCHIVED // File is archived but not deleted, potentially recoverable.
  DELETION_PENDING // File is marked for deletion by a background job.
  DELETED // File has been deleted from storage and DB record is marked (or soft-deleted).
  ERROR // An error occurred during upload or processing.
}

// DeliverableStatus tracks the state of a project deliverable. (NEW)
enum DeliverableStatus {
  DRAFT // Manually created draft or placeholder.
  QUEUED // Queued for generation.
  GENERATING // Actively being generated by AI or a process.
  UPDATING // An existing deliverable is being updated.
  COMPLETED // Generation or update successful.
  FAILED // Generation or update failed.
  ARCHIVED // Deliverable is archived.
}

// DeliverableType categorizes the kind of deliverable. (NEW)
// Using a string for flexibility, but an enum could be used if types are strictly defined.
// Example types: "PITCH_DECK_SLIDES", "MARKET_RESEARCH_SUMMARY_DOC", "TECHNICAL_SPECIFICATION_MD", "USER_STORIES_LIST"

// --------------------
// AUTH & USER MODELS
// These models handle user authentication, profiles, and related settings.
// --------------------

// User model represents an individual signed up on Idea_lens.
model User {
  id             String    @id @default(uuid()) // Unique identifier for the user.
  email          String    @unique // User's email address, used for login and communication.
  hashedPassword String? // Hashed password, null if user signed up via OAuth only.
  firstName      String? // User's first name.
  lastName       String? // User's last name.
  avatarUrl      String? // URL to the user's avatar image.
  emailVerified  DateTime? // Timestamp when the user's email was verified.
  createdAt      DateTime  @default(now()) // Timestamp of user account creation.
  updatedAt      DateTime  @updatedAt // Timestamp of the last update to user account.

  // Relations: Connections to other models.
  sessions                Session[] // Active login sessions for the user.
  oauthAccounts           OAuthAccount[] // Linked OAuth accounts (e.g., Google, GitHub).
  ownedWorkspaces         Workspace[]              @relation("WorkspaceOwner") // Workspaces created by this user.
  workspaceMemberships    WorkspaceMember[] // Memberships in various workspaces.
  projectMemberships      ProjectMember[] // Memberships in various projects.
  assignedTasks           Task[]                   @relation("TaskAssignee") // Tasks assigned to this user.
  reportedTasks           Task[]                   @relation("TaskReporter") // Tasks reported/created by this user.
  notifications           Notification[] // Notifications for this user.
  userSettings            UserSettings? // User-specific settings like theme and notification preferences.
  apiKeys                 ApiKey[] // API keys generated by the user.
  createdProjects         Project[]                @relation("ProjectCreator") // Projects created by this user.
  uploadedFiles           ProjectFile[]            @relation("FileUploader") // Files uploaded by this user.
  requestedAnalyses       Analysis[]               @relation("AnalysisRequester") // AI analyses requested by this user.
  emailVerificationTokens EmailVerificationToken[] // Tokens for verifying email addresses.
  passwordResetTokens     PasswordResetToken[] // Tokens for resetting passwords.
  initiatedOrders         Order[]                  @relation("OrderInitiator") // Orders initiated by this user.
  workspaceInvitesSent    WorkspaceInvite[]        @relation("InvitedByUser") // Workspace invites sent by this user.
  initiatedPipelineRuns   ProjectPipelineRun[]     @relation("PipelineRunInitiator") // Pipeline runs initiated by this user.
  feedbackEntries         UserFeedback[] // User feedback on AI outputs or platform features.
  createdDeliverables     Deliverable[]            @relation("DeliverableCreator") // Deliverables created by this user. (NEW)
  lastUpdatedDeliverables Deliverable[]            @relation("DeliverableLastUpdater") // Deliverables last updated by this user. (NEW)

  @@map("users") // Maps to the "users" table in the database.
}

// OAuthAccount model stores information about users who sign in via third-party OAuth providers.
model OAuthAccount {
  id             String        @id @default(uuid()) // Unique identifier for the OAuth account link.
  provider       OAuthProvider // The OAuth provider (e.g., GOOGLE, GITHUB).
  providerUserId String // User's unique ID from the OAuth provider.
  userId         String // Foreign key linking to the User model.
  accessToken    String? // Encrypted access token from the OAuth provider. Should be encrypted at rest.
  refreshToken   String? // Encrypted refresh token (if provided). Should be encrypted at rest.
  expiresAt      DateTime? // Expiry date of the access token.
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Establishes a many-to-one relationship with User.

  @@unique([provider, providerUserId]) // Ensures a user can only link one account per provider.
  @@map("oauth_accounts")
}

// Session model stores active user login sessions.
model Session {
  id           String   @id @default(uuid()) // Unique identifier for the session record in the database.
  sessionToken String   @unique @default(uuid()) // The actual token value sent to the client for authentication.
  userId       String // Foreign key linking to the User model.
  expiresAt    DateTime // Timestamp when the session expires.
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ipAddress    String? // IP address from which the session was initiated.
  userAgent    String? // User agent string of the client.
  location     String? // Location of the user.

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// EmailVerificationToken model for managing email verification process.
model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique // The unique verification token sent to the user.
  email     String // The email address this token is intended for.
  userId    String // Foreign key linking to the User model.
  expiresAt DateTime // Timestamp when the token expires.
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

// PasswordResetToken model for managing password reset process.
model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique // The unique password reset token.
  userId    String // Foreign key linking to the User model.
  expiresAt DateTime // Timestamp when the token expires.
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// ApiKey model for programmatic access to Idea_lens API.
model ApiKey {
  id          String    @id @default(uuid())
  hashedKey   String    @unique // Securely stored hash of the API key. The actual key is shown once.
  prefix      String    @unique // A short, unique prefix of the key for identification (e.g., "sk_live_...").
  userId      String // Foreign key linking to the User who owns this key.
  description String? // Optional description for the API key.
  scopes      String[] // List of permissions granted to this key (e.g., "project:read", "analysis:create").
  expiresAt   DateTime? // Optional expiry date for the API key.
  lastUsedAt  DateTime? // Timestamp of when the key was last used.
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// UserSettings model stores individual user preferences.
model UserSettings {
  id                        String    @id @default(uuid())
  userId                    String    @unique // One-to-one relationship with User.
  receiveEmailNotifications Boolean   @default(true) // Preference for receiving email notifications.
  receiveInAppNotifications Boolean   @default(true) // Preference for receiving in-app notifications.
  theme                     UserTheme @default(SYSTEM) // UI theme preference.
  language                  String    @default("en") // Preferred language for the UI.
  timezone                  String    @default("UTC") // User's preferred timezone.
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// --------------------
// WORKSPACE MODELS
// Workspaces are top-level containers for projects, teams, and billing.
// --------------------

// Workspace model represents a collaborative environment (like a company or team folder).
model Workspace {
  id                String   @id @default(uuid())
  name              String // Name of the workspace.
  ownerId           String // Foreign key linking to the User who owns/created the workspace.
  billingCustomerId String?  @unique // Customer ID from the payment gateway (e.g., Flutterwave).
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  owner              User               @relation("WorkspaceOwner", fields: [ownerId], references: [id]) // The user who owns the workspace.
  members            WorkspaceMember[] // Members belonging to this workspace.
  projects           Project[] // Projects created within this workspace.
  invites            WorkspaceInvite[] // Pending invitations to join this workspace.
  activeSubscription Subscription? // The current active subscription for this workspace.
  orders             Order[] // Payment orders associated with this workspace.
  settings           WorkspaceSettings? // Settings specific to this workspace.
  pipelineTemplates  PipelineTemplate[] // Custom pipeline templates defined for this workspace.

  @@map("workspaces")
}

// WorkspaceMember model links Users to Workspaces with specific roles.
model WorkspaceMember {
  id          String   @id @default(uuid())
  workspaceId String // Foreign key to Workspace.
  userId      String // Foreign key to User.
  role        UserRole @default(MEMBER) // Role of the user within this workspace.
  joinedAt    DateTime @default(now()) // Timestamp when the user joined the workspace.

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId]) // Ensures a user can only be a member of a workspace once.
  @@map("workspace_members")
}

// WorkspaceInvite model stores invitations sent to users to join a workspace.
model WorkspaceInvite {
  id              String       @id @default(uuid())
  email           String // Email of the person being invited.
  workspaceId     String // Foreign key to the Workspace they are invited to.
  invitedByUserId String // Foreign key to the User who sent the invitation.
  role            UserRole // Role assigned to the invitee upon acceptance.
  token           String       @unique @default(cuid()) // Unique token for the invitation link.
  status          InviteStatus @default(PENDING) // Current status of the invitation.
  expiresAt       DateTime // Timestamp when the invitation expires.
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedByUser User      @relation("InvitedByUser", fields: [invitedByUserId], references: [id], onDelete: Cascade)

  @@index([email]) // Index on email for faster lookups.
  @@map("workspace_invites")
}

// WorkspaceSettings model stores configuration specific to a workspace.
model WorkspaceSettings {
  id                       String              @id @default(uuid())
  workspaceId              String              @unique // One-to-one relationship with Workspace.
  defaultProjectVisibility WorkspaceVisibility @default(PRIVATE) // Default visibility for new projects.
  memberInvitePolicy       MemberInvitePolicy  @default(ADMINS_ONLY) // Who can invite new members.
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map("workspace_settings")
}

// --------------------
// BILLING MODELS
// These models handle subscription plans, payments, and orders via Flutterwave.
// --------------------

// Plan model defines subscription plans or one-time purchase options.
model Plan {
  id                String       @id @default(uuid()) // Internal unique ID for the plan.
  name              String // Human-readable name of the plan (e.g., "Pro", "Idea Pipeline").
  flutterwavePlanId String?      @unique // Plan ID from Flutterwave, for recurring subscriptions.
  price             Float // Price of the plan.
  currency          String // Currency code (e.g., "USD", "NGN").
  interval          PlanInterval // Billing interval (ONE_TIME, MONTHLY, YEARLY).
  description       String? // Description of the plan and its benefits.
  features          Json? // JSON object detailing features included (e.g., {"ai_credits": 1000, "max_projects": 5, "github_actions_limit_per_month": 100}).
  projectLimit      Int? // Max number of projects allowed (-1 for unlimited).
  memberLimit       Int? // Max number of members per workspace (-1 for unlimited).
  aiCreditLimit     Int? // Limit on AI analysis usage (e.g., monthly credits, -1 for unlimited).
  isActive          Boolean      @default(true) // Whether the plan is currently available for new subscriptions/purchases.
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  subscriptions Subscription[] // Subscriptions associated with this plan.
  orders        Order[] // Orders made for this plan (especially one-time).

  @@map("plans")
}

// Subscription model tracks active subscriptions for workspaces.
model Subscription {
  id                        String             @id @default(uuid())
  workspaceId               String             @unique // A workspace typically has one active subscription.
  planId                    String // Foreign key to the Plan model.
  flutterwaveSubscriptionId String             @unique // Subscription ID from Flutterwave.
  status                    SubscriptionStatus // Current status of the subscription.
  currentPeriodStart        DateTime // Start date of the current billing period.
  currentPeriodEnd          DateTime // End date of the current billing period.
  trialEndsAt               DateTime? // If on trial, when the trial period ends.
  cancelAtPeriodEnd         Boolean            @default(false) // If true, subscription will cancel at period end, not renew.
  canceledAt                DateTime? // Timestamp when the subscription was marked for cancellation.
  endedAt                   DateTime? // Timestamp when the subscription fully ended (after period end if canceled).
  createdAt                 DateTime           @default(now())
  updatedAt                 DateTime           @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  plan      Plan      @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}

// Order model tracks individual payments or purchase attempts.
model Order {
  id                       String      @id @default(uuid())
  workspaceId              String // Workspace this order belongs to.
  initiatedByUserId        String // User who initiated this order.
  planId                   String? // Plan associated with this order (for one-time or initial sub payment).
  flutterwaveTransactionId String      @unique // Transaction ID from Flutterwave.
  flutterwaveReference     String?     @unique // Payment reference from Flutterwave.
  amount                   Float // Amount paid.
  currency                 String // Currency of the payment.
  status                   OrderStatus // Status of the order (PENDING, SUCCESSFUL, FAILED).
  paymentMethod            String? // Payment method used (e.g., "card", "bank_transfer").
  description              String? // Description of the purchase (e.g., "Pro Plan Subscription", "Pipeline Run for Project X").
  invoiceUrl               String? // Link to the invoice on Flutterwave, if available.
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  initiatedBy User      @relation("OrderInitiator", fields: [initiatedByUserId], references: [id])
  plan        Plan?     @relation(fields: [planId], references: [id]) // Nullable if it's not a direct plan purchase.

  @@map("orders")
}

// --------------------
// PROJECT & CORE FEATURE MODELS
// These models represent the core entities of Idea_lens: Projects, Ideas, Analyses, Tasks, etc.
// --------------------

// Project model represents a single software development idea/project being worked on.
model Project {
  id              String   @id @default(uuid())
  name            String // Name of the project.
  description     String? // Optional detailed description of the project.
  workspaceId     String // Foreign key linking to the Workspace this project belongs to.
  createdByUserId String // Foreign key linking to the User who created this project.
  projectStatus   String? // High-level status of the project (e.g., "Ideation", "Planning", "Development", "Launched", "On Hold", "Archived").
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  workspace           Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdByUser       User                 @relation("ProjectCreator", fields: [createdByUserId], references: [id])
  members             ProjectMember[] // Members specifically part of this project and their roles.
  ideas               Idea[] // Ideas associated with this project.
  tasks               Task[] // Tasks for this project.
  analyses            Analysis[] // AI analyses performed for this project.
  projectFiles        ProjectFile[] // Files uploaded to this project. (NEWLY EMPHASIZED - this is the "File table")
  integrations        ProjectIntegration[] // Third-party integrations configured for this project.
  pipelineRuns        ProjectPipelineRun[] // Executed pipelines for this project.
  productivityMetrics ProductivityMetric[] // Tracked productivity metrics.
  githubAIActionLogs  GitHubAIActionLog[] // Logs of AI actions performed on GitHub for this project.
  deliverables        Deliverable[] // Generated outputs/results for the project. (NEW)

  @@map("projects")
}

// ProjectMember model links Users to Projects with specific project roles.
model ProjectMember {
  id        String      @id @default(uuid())
  projectId String // Foreign key to Project.
  userId    String // Foreign key to User.
  role      ProjectRole @default(VIEWER) // Role of the user within this specific project.
  addedAt   DateTime    @default(now()) // Timestamp when the user was added to the project.

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId]) // Ensures a user has only one role per project.
  @@map("project_members")
}

// Idea model represents a raw software concept or idea.
model Idea {
  id         String     @id @default(uuid())
  projectId  String // Foreign key linking to the Project this idea belongs to.
  title      String? // Optional title for the idea.
  rawText    String?    @db.Text // Main textual description of the idea.
  sourceUrls String[] // URLs to similar concepts, research, or inspirational material.
  status     IdeaStatus @default(DRAFT) // Current status of the idea in its lifecycle.
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  project       Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploadedFiles IdeaProjectFile[] // Files specifically supporting or describing this idea (join table to ProjectFile).
  analyses      Analysis[] // AI analyses performed specifically on this idea (e.g., validation, refinement).

  @@map("ideas")
}

// ProjectFile model represents any file uploaded within the context of a project, typically to cloud storage like Cloudinary. (UPDATED)
model ProjectFile {
  id              String     @id @default(uuid())
  projectId       String // Foreign key to the Project this file belongs to.
  uploaderUserId  String // Foreign key to the User who uploaded the file.
  fileName        String // Original name of the file.
  fileType        String // MIME type of the file (e.g., "application/pdf", "image/png").
  sizeBytes       Int // Size of the file in bytes.
  status          FileStatus @default(ACTIVE) // Current status of the file. (NEW)
  storageProvider String     @default("cloudinary") // Name of the storage provider (e.g., "cloudinary", "s3").
  providerFileId  String // Unique ID of the file from the storage provider (e.g., Cloudinary public_id).
  url             String     @unique // Publicly accessible URL of the file.
  description     String? // Optional description of the file.
  metadata        Json? // Additional metadata, e.g., image dimensions, video duration. (NEW)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  project             Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  uploader            User                 @relation("FileUploader", fields: [uploaderUserId], references: [id])
  ideaLinks           IdeaProjectFile[] // Links this file to specific ideas.
  analysisAttachments AnalysisAttachment[] // Links this file as an attachment to analyses.
  deliverableLink     Deliverable? // If this file is the primary artifact of a Deliverable. (NEW, one-to-one optional)

  @@index([projectId, status]) // Index for querying files by project and status.
  @@map("project_files")
}

// IdeaProjectFile is a join table linking Ideas to ProjectFiles.
// This allows multiple files to be associated with an idea for different purposes.
model IdeaProjectFile {
  id            String   @id @default(uuid())
  ideaId        String // Foreign key to Idea.
  projectFileId String // Foreign key to ProjectFile.
  purpose       String? // Describes the role of the file for the idea (e.g., "supporting_document", "concept_image").
  createdAt     DateTime @default(now())

  idea        Idea        @relation(fields: [ideaId], references: [id], onDelete: Cascade)
  projectFile ProjectFile @relation(fields: [projectFileId], references: [id], onDelete: Cascade)

  @@unique([ideaId, projectFileId]) // Ensures a file is linked to an idea only once.
  @@map("idea_project_files")
}

// Analysis model stores the results and metadata of AI-driven analyses.
model Analysis {
  id                String         @id @default(uuid())
  projectId         String // Project this analysis belongs to.
  ideaId            String? // Optional: if the analysis is specific to a particular Idea.
  pipelineRunId     String? // Optional: if this analysis was part of a ProjectPipelineRun.
  type              AnalysisType // Type of analysis performed (e.g., IDEA_VALIDATION, MARKET_RESEARCH).
  status            AnalysisStatus @default(PENDING) // Current status of the analysis.
  requestedByUserId String // User who requested this analysis.
  parameters        Json? // JSON object storing input parameters for the AI/service.
  // Example: {"competitor_urls": ["example.com"], "focus_areas": ["pricing"]}
  result            Json? // JSON object storing the structured output from the AI/service.
  // Example for CODE_REVIEW_SUMMARY: {"summary": "...", "suggestions": [{"file": "a.py", "line": 10, "comment": "..."}]}
  summary           String?        @db.Text // Optional human-readable summary of the analysis result.
  errorMessage      String?        @db.Text // Error message if the analysis failed.
  aiProvider        String? // Name of the AI provider used (e.g., "Gemini", "Perplexity Sonar", "Mistral").
  modelUsed         String? // Specific AI model used (e.g., "gemini-1.5-pro", "sonar-medium-online").
  promptTokens      Int? // Number of tokens in the input prompt (if applicable).
  completionTokens  Int? // Number of tokens in the AI's completion (if applicable).
  totalTokens       Int? // Total tokens used (if applicable).
  durationMs        Int? // Time taken for processing the analysis in milliseconds.
  jobId             String?        @unique // BullMQ job ID, if processed asynchronously.
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  startedAt         DateTime? // Timestamp when processing actually started.
  completedAt       DateTime? // Timestamp when processing finished (successfully or failed).

  // Relations
  project               Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  idea                  Idea?                @relation(fields: [ideaId], references: [id], onDelete: SetNull) // If idea is deleted, analysis might still be relevant.
  requestedByUser       User                 @relation("AnalysisRequester", fields: [requestedByUserId], references: [id])
  attachments           AnalysisAttachment[] // Files attached to or generated by this analysis.
  competitors           Competitor[] // If type is COMPETITOR_ANALYSIS, lists found competitors.
  nameSuggestions       NameSuggestion[] // If type is NAMING_BRANDING, lists suggested names.
  pipelineRun           ProjectPipelineRun?  @relation(fields: [pipelineRunId], references: [id], onDelete: SetNull)
  githubAIActionLogs    GitHubAIActionLog[] // AI Actions on GitHub that were triggered or informed by this analysis.
  generatedDeliverables Deliverable[]        @relation("GeneratedByAnalysis") // Deliverables generated by this analysis. (NEW)

  @@index([type, status]) // Index for querying analyses by type and status.
  @@map("analyses")
}

// AnalysisAttachment is a join table linking Analyses to ProjectFiles.
// Used for files that are input to, or output from, an analysis.
model AnalysisAttachment {
  id             String   @id @default(uuid())
  analysisId     String // Foreign key to Analysis.
  projectFileId  String // Foreign key to ProjectFile.
  roleInAnalysis String? // Describes the file's role (e.g., "source_document", "generated_report").
  createdAt      DateTime @default(now())

  analysis    Analysis    @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  projectFile ProjectFile @relation(fields: [projectFileId], references: [id], onDelete: Cascade)

  @@unique([analysisId, projectFileId])
  @@map("analysis_attachments")
}

// Competitor model stores information about competitors identified during analysis.
model Competitor {
  id            String   @id @default(uuid())
  analysisId    String // Foreign key to the COMPETITOR_ANALYSIS or SWOT_ANALYSIS this was found in.
  name          String // Name of the competitor.
  websiteUrl    String? // Competitor's website URL.
  logoUrl       String? // URL of the competitor's logo (e.g., fetched via BrandFetch).
  description   String?  @db.Text // Description of the competitor and their offerings.
  strengths     String[] // List of identified strengths.
  weaknesses    String[] // List of identified weaknesses.
  opportunities String[] // Opportunities related to this competitor (e.g., gaps they don't fill).
  threats       String[] // Threats posed by this competitor.
  marketSegment String? // Target market segment of the competitor.
  fundingStage  String? // Funding stage or notable investments.
  rawSourceData Json? // JSON object storing raw data from which this competitor info was derived.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("competitors")
}

// NameSuggestion model stores names suggested by AI during Naming & Branding analysis.
model NameSuggestion {
  id                       String    @id @default(uuid())
  analysisId               String // Foreign key to the NAMING_BRANDING Analysis.
  suggestedName            String // The name suggested by AI.
  reasoning                String?   @db.Text // AI's reasoning or context for the suggestion.
  domainAvailability       String? // Status of domain availability (e.g., "AVAILABLE", "UNAVAILABLE", "TAKEN", "PREMIUM").
  domainCheckedAt          DateTime? // Timestamp when domain availability was last checked.
  domainCheckProvider      String? // Provider used for domain check (e.g., "DomainR").
  socialHandlesAvailable   Json? // JSON object showing availability of social media handles (e.g., {"twitter": "AVAILABLE"}).
  trademarkRisk            String? // Estimated trademark risk (e.g., "LOW", "MEDIUM", "HIGH").
  brandIdentitySuggestions String?   @db.Text // AI-generated suggestions for brand identity elements.
  isFavorited              Boolean   @default(false) // If the user has favorited this name suggestion.
  createdAt                DateTime  @default(now())

  analysis Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@map("name_suggestions")
}

// Task model represents a unit of work within a project.
model Task {
  id               String       @id @default(uuid())
  projectId        String // Foreign key to the Project this task belongs to.
  title            String // Title of the task.
  description      String?      @db.Text // Detailed description of the task.
  status           TaskStatus   @default(BACKLOG) // Current status of the task.
  priority         TaskPriority @default(MEDIUM) // Priority of the task.
  dueDate          DateTime? // Optional due date for the task.
  assigneeId       String? // Foreign key to the User assigned to this task.
  reporterId       String // Foreign key to the User who created/reported this task.
  parentTaskId     String? // Optional: For subtasks, links to the parent Task.
  externalId       String? // ID of the task in an external system (e.g., Jira issue key, GitHub issue number).
  externalSource   String? // Name of the external system (e.g., "JIRA", "GITHUB").
  externalUrl      String? // URL to the task in the external system.
  estimatedHours   Float? // Estimated effort in hours.
  actualHoursSpent Float? // Actual hours spent on the task.
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  completedAt      DateTime? // Timestamp when the task was marked as completed.

  // Relations
  project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  reporter   User    @relation("TaskReporter", fields: [reporterId], references: [id])
  parentTask Task?   @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: SetNull) // SetNull to avoid cycles
  subTasks   Task[]  @relation("SubTasks") // List of subtasks under this task.

  @@index([status, priority])
  @@index([assigneeId])
  @@index([externalId, externalSource]) // For efficient lookup of externally linked tasks.
  @@map("tasks")
}

// ProductivityMetric model stores aggregated metrics for projects or teams.
model ProductivityMetric {
  id                String   @id @default(uuid())
  projectId         String // Project these metrics are for.
  metricType        String // Type of metric (e.g., "tasks_completed", "commits_pushed", "cycle_time").
  value             Float // Numerical value of the metric.
  unit              String? // Unit of the metric (e.g., "count", "hours", "days").
  periodStartDate   DateTime // Start date of the period this metric covers.
  periodEndDate     DateTime // End date of the period this metric covers.
  calculationSource String? // Source of the data (e.g., "INTERNAL_TASKS", "GITHUB_INTEGRATION").
  metadata          Json? // Additional context or breakdown for the metric.
  createdAt         DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, metricType, periodEndDate])
  @@map("productivity_metrics")
}

// --------------------
// PIPELINE MODELS
// For orchestrating sequences of analyses.
// --------------------

// PipelineTemplate defines a reusable sequence of analysis types.
model PipelineTemplate {
  id                String         @id @default(uuid())
  workspaceId       String? // Optional: if the template is specific to a workspace (null for global templates).
  name              String // Name of the pipeline template (e.g., "Full Idea Validation", "Quick Market Scan").
  description       String? // Description of what the pipeline does.
  analysisSequence  AnalysisType[] // Ordered list of AnalysisTypes to be executed.
  defaultParameters Json? // JSON object with default parameters for each analysis type in the sequence.
  // e.g., { "MARKET_RESEARCH": {"region": "global"}, "SWOT_ANALYSIS": {} }
  isGlobal          Boolean        @default(false) // True if this is a system-defined global template.
  createdByUserId   String? // User who created this template (if not global).
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  workspace    Workspace?           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  // createdByUser  User?      @relation(fields: [createdByUserId], references: [id]) // If needed to track creator for non-global.
  pipelineRuns ProjectPipelineRun[]

  @@map("pipeline_templates")
}

// ProjectPipelineRun represents an instance of a PipelineTemplate being executed for a Project.
model ProjectPipelineRun {
  id                  String         @id @default(uuid())
  projectId           String // Project for which this pipeline is run.
  pipelineTemplateId  String // The PipelineTemplate being used.
  initiatedByUserId   String // User who initiated this pipeline run.
  status              AnalysisStatus @default(PENDING) // Overall status of the pipeline run (can be derived from its analyses).
  parametersOverrides Json? // JSON object with user-provided overrides for parameters.
  startedAt           DateTime?
  completedAt         DateTime?
  errorMessage        String?        @db.Text
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  project               Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  pipelineTemplate      PipelineTemplate @relation(fields: [pipelineTemplateId], references: [id])
  initiatedByUser       User             @relation("PipelineRunInitiator", fields: [initiatedByUserId], references: [id])
  analyses              Analysis[] // Individual analyses created as part of this pipeline run.
  generatedDeliverables Deliverable[]    @relation("GeneratedByPipelineRun") // Deliverables generated by this pipeline run. (NEW)

  @@map("project_pipeline_runs")
}

// --------------------
// DELIVERABLE MODEL (NEW)
// Represents tangible outputs or results for a project.
// --------------------
model Deliverable {
  id                       String            @id @default(uuid())
  projectId                String // The project this deliverable belongs to.
  title                    String // Title of the deliverable (e.g., "Pitch Deck - Version 1", "Market Research Report").
  description              String? // Optional description of the deliverable.
  content                  String?           @db.Text // Stores the main content if text-based (e.g., Markdown).
  // Can be null if the deliverable is primarily a file.
  format                   String // Format of the deliverable (e.g., "markdown", "pdf", "pptx", "link").
  type                     String // Categorizes the deliverable (e.g., "PITCH_DECK", "TECHNICAL_SPEC", "USER_STORIES"). Consider using an enum if types are fixed.
  status                   DeliverableStatus @default(DRAFT) // Current status of the deliverable.
  version                  Int               @default(1) // Version number for iterative deliverables.
  projectFileId            String?           @unique // Optional: links to a ProjectFile if the deliverable is a file (e.g., a generated PDF). (NEW)
  externalUrl              String? // Optional: link to an external resource if the deliverable is hosted elsewhere (e.g., Google Slides).
  generatedByAnalysisId    String? // Optional: If generated by a specific Analysis.
  generatedByPipelineRunId String? // Optional: If generated as part of a ProjectPipelineRun.
  createdByUserId          String // User who created (or initiated generation of) this deliverable.
  lastUpdatedByUserId      String? // User who last updated this deliverable.
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  project                Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  linkedProjectFile      ProjectFile?        @relation(fields: [projectFileId], references: [id], onDelete: SetNull) // Relation for file-based deliverables.
  generatedByAnalysis    Analysis?           @relation("GeneratedByAnalysis", fields: [generatedByAnalysisId], references: [id], onDelete: SetNull)
  generatedByPipelineRun ProjectPipelineRun? @relation("GeneratedByPipelineRun", fields: [generatedByPipelineRunId], references: [id], onDelete: SetNull)
  creator                User                @relation("DeliverableCreator", fields: [createdByUserId], references: [id])
  lastUpdater            User?               @relation("DeliverableLastUpdater", fields: [lastUpdatedByUserId], references: [id])

  @@index([projectId, type])
  @@index([generatedByAnalysisId])
  @@index([generatedByPipelineRunId])
  @@map("deliverables")
}

// --------------------
// INTEGRATION MODELS
// For connecting Idea_lens with external tools like GitHub, Jira.
// --------------------

// ProjectIntegration model stores configuration for third-party service integrations per project.
model ProjectIntegration {
  id                String                 @id @default(uuid())
  projectId         String // Foreign key to the Project this integration is for.
  provider          IntegrationProvider // The external service provider (e.g., GITHUB, JIRA).
  externalAccountId String? // Account ID or similar identifier from the external service (e.g., GitHub App installation_id, Jira site ID).
  accessToken       String? // Encrypted access token for the external service. Should be encrypted at rest.
  refreshToken      String? // Encrypted refresh token, if applicable. Should be encrypted at rest.
  tokenExpiresAt    DateTime? // Expiry date of the access token.
  settings          Json? // Provider-specific settings.
  // Example for GitHub:
  // { "repositoryOwner": "owner", "repositoryName": "repo", "trackedBranches": ["main", "develop"],
  //   "aiActions": {
  //     "prReviewSummary": { "enabled": true, "targetBranches": ["main"], "autoPost": true },
  //     "prReviewComments": { "enabled": false, "minLinesChanged": 20, "autoPost": false, "commentLevel": "suggestion" },
  //     "issueAutoClose": { "enabled": true, "keywords": ["fixes", "closes", "resolves"], "prMergedTargetBranches": ["main"] },
  //     "issueAutoTag": { "enabled": true, "rules": [{"keyword": "bug", "tag": "bug-confirmed"}, {"textContains": "feature request", "tag": "enhancement"}] },
  //     "prAutoTagRelatedIssue": { "enabled": true }
  //   },
  //   "syncIssues": true, "syncPullRequests": true
  // }
  isEnabled         Boolean                @default(true) // Whether the integration is active.
  lastSyncAt        DateTime? // Timestamp of the last successful data synchronization.
  syncStatus        IntegrationSyncStatus? // Current status of data synchronization.
  syncErrorMessage  String?                @db.Text // Error message if the last sync failed.
  addedByUserId     String? // User who configured this integration.
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt

  project            Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  githubAIActionLogs GitHubAIActionLog[] // Logs of AI actions performed on GitHub via this integration.
  // addedByUser User?    @relation(fields: [addedByUserId], references: [id]) // If needed to track who added it.

  @@unique([projectId, provider]) // A project can have only one integration per provider type.
  @@map("project_integrations")
}

// GitHubAIActionLog model logs specific AI-driven actions taken on GitHub.
model GitHubAIActionLog {
  id                   String             @id @default(uuid())
  projectIntegrationId String // Links to the specific GitHub ProjectIntegration instance.
  projectId            String // Denormalized for easier querying directly by project.
  analysisId           String? // Optional: Link to an IdeaLens Analysis that triggered or informed this action.
  actionType           GitHubAIActionType // The type of AI action performed (e.g., PR_REVIEW_COMMENT, ISSUE_AUTO_CLOSE).
  githubEntityType     GitHubEntityType // The type of GitHub entity affected (e.g., PULL_REQUEST, ISSUE).
  githubEntityId       String // GitHub's internal ID or number for the entity (e.g., PR number as string, issue global ID).
  githubEntityUrl      String? // Direct URL to the GitHub entity (e.g., PR or issue URL).
  githubCommentId      String? // If the action was posting a comment, store GitHub's comment ID for reference or updates.
  content              Json? // Content related to the action.
  // For PR_REVIEW_COMMENT: {"file_path": "src/index.js", "line_number": 10, "comment_text": "Suggestion: ..."}
  // For ISSUE_AUTO_TAG: {"tags_added": ["bug", "needs-triage"]}
  // For ISSUE_AUTO_CLOSE: {"reason": "Linked PR #123 merged."}
  status               ActionStatus // The outcome of the action (PENDING, EXECUTED, FAILED, SKIPPED).
  errorMessage         String?            @db.Text // Detailed error message if the action failed.
  triggeredBy          String? // Describes how the action was initiated (e.g., "webhook:pr_opened", "user_manual_run:analysis_123", "pipeline_step:code_analysis").
  performedAt          DateTime           @default(now()) // Timestamp when the action was logged/attempted.

  projectIntegration ProjectIntegration @relation(fields: [projectIntegrationId], references: [id], onDelete: Cascade)
  project            Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  analysis           Analysis?          @relation(fields: [analysisId], references: [id], onDelete: SetNull) // Analysis might be deleted, but log remains.

  @@index([projectIntegrationId, githubEntityId, githubEntityType]) // For querying actions related to a specific GitHub entity via an integration.
  @@index([analysisId]) // For finding actions related to a specific IdeaLens analysis.
  @@index([projectId, performedAt]) // For time-based queries of actions per project.
  @@map("github_ai_action_logs")
}

// --------------------
// NOTIFICATION MODELS
// For informing users about important events and updates.
// --------------------

// Notification model stores individual notifications for users.
model Notification {
  id         String           @id @default(uuid())
  userId     String // Foreign key to the User who should receive this notification.
  type       NotificationType // Type of the notification (e.g., TASK_ASSIGNED, ANALYSIS_COMPLETED, GITHUB_AI_ACTION_SUCCESS).
  title      String // Brief title of the notification.
  message    String           @db.Text // Detailed message of the notification.
  link       String? // Optional in-app navigation link related to the notification.
  isRead     Boolean          @default(false) // Whether the user has read this notification.
  isEmailed  Boolean          @default(false) // Whether an email was also sent for this notification.
  entityId   String? // ID of the related entity (e.g., taskId, projectId, analysisId, githubAIActionLogId, deliverableId).
  entityType String? // Type of the related entity (e.g., "Task", "Project", "Analysis", "GitHubAIActionLog", "Deliverable").
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead]) // Index for efficiently querying unread notifications for a user.
  @@map("notifications")
}

// --------------------
// USER FEEDBACK MODEL
// For collecting user feedback on AI outputs or platform features to help improve IdeaLens.
// --------------------

// UserFeedback model allows users to provide structured or unstructured feedback.
model UserFeedback {
  id         String             @id @default(uuid())
  userId     String // The user providing the feedback.
  entityType FeedbackEntityType // The type of item or feature the feedback pertains to.
  entityId   String? // Optional: The specific ID of the item (e.g., Analysis.id, GitHubAIActionLog.id, Deliverable.id).
  rating     Int? // Optional: A numerical rating (e.g., 1-5 stars).
  comment    String?            @db.Text // User's textual feedback or comments.
  metadata   Json? // Any additional structured context or data related to the feedback.
  // e.g., {"ai_model_used": "gemini-1.5", "specific_suggestion_liked": true}
  isResolved Boolean            @default(false) // For internal tracking if the feedback has been reviewed or actioned.
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, entityType]) // For querying feedback by user and type.
  @@index([entityType, entityId]) // For querying feedback on specific items.
  @@map("user_feedback")
}
